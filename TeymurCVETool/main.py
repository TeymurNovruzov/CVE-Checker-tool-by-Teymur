# Whole code is written by Teymur Novruzov.

import re
import requests
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException, WebDriverException
from flask import Flask, request, render_template_string, redirect, url_for
import threading
import time
import webbrowser

app = Flask(__name__)

# TN - Dictionary to store references
references_dict = {}

# TN - Function to check if CVE ID is valid
def is_valid_cve_id(cve_id):
    pattern = re.compile(r'^CVE-\d{4}-\d{4,}$')
    return pattern.match(cve_id) is not None

# TN - Function to get CVE state from MITRE
def get_cve_state(cve_id):
    url = f'https://cveawg.mitre.org/api/cve-id/{cve_id}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        state = data.get('state', 'State not found')
        return state
    else:
        return 'State not found'

# TN - Function to get vendor information from MITRE
def get_vendor_info(cve_id):
    url = f'https://cveawg.mitre.org/api/cve/{cve_id}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        vendor_info = data.get('containers', {}).get('cna', {}).get('affected', [])
        descriptions = data.get('containers', {}).get('cna', {}).get('descriptions', [])
        description_value = descriptions[0].get('value', '') if descriptions else ''
        return vendor_info, description_value
    else:
        return [], ''

# TN - Function to get base score from NVD database
def get_base_score(cve_id):
    try:
        options = Options()
        options.headless = True
        driver = webdriver.Firefox(options=options)
        driver.get(f'https://nvd.nist.gov/vuln/detail/{cve_id}')

        wait = WebDriverWait(driver, 10)
        wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'severityDetail')))

        base_score_element = driver.find_element(By.ID, 'Cvss3NistCalculatorAnchor')
        base_score = base_score_element.text.strip()

        return base_score

    except TimeoutException:
        return "Timeout occurred"
    except WebDriverException as e:
        return f"WebDriverException: {e}"
    except Exception as e:
        return f"An error occurred: {e}"

    finally:
        driver.quit()

# TN - Function to get vector from NVD database
def get_vector(cve_id):
    try:
        options = Options()
        options.headless = True
        driver = webdriver.Firefox(options=options)
        driver.get(f'https://nvd.nist.gov/vuln/detail/{cve_id}')

        wait = WebDriverWait(driver, 10)
        wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'tooltipCvss3NistMetrics')))

        vector_element = driver.find_element(By.CLASS_NAME, 'tooltipCvss3NistMetrics')
        vector = vector_element.text.strip()

        return vector

    except TimeoutException:
        return "Timeout occurred"
    except WebDriverException as e:
        return f"WebDriverException: {e}"
    except Exception as e:
        return f"An error occurred: {e}"

    finally:
        driver.quit()

# TN - Function to get references from CVE website
def get_references(cve_id):
    try:
        options = Options()
        options.headless = True
        driver = webdriver.Firefox(options=options)
        driver.get(f'https://www.cve.org/CVERecord?id={cve_id}')

        wait = WebDriverWait(driver, 10)
        wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'cve-word-wrap')))

        references = driver.find_elements(By.CLASS_NAME, 'cve-word-wrap')
        references_html = "<h2>References</h2><ul>"
        exploit_html = "<h2>Exploits</h2><ul>"
        references_list = []
        for reference in references:
            reference_link = reference.find_element(By.TAG_NAME, 'a').get_attribute('href')
            reference_text = reference.text.strip()
            if "exploit" in reference_text.lower():
                exploit_link = reference_link
                exploit_download_link = exploit_link.replace("/exploits/", "/download/")
                exploit_html += f'<li><a href="{exploit_link}">{reference_text}</a> - <a href="{exploit_download_link}">Download</a></li>'
            else:
                # TN - Check if the URL is valid
                if is_valid_url(reference_link):
                    references_html += f'<li><a href="{reference_link}">{reference_text}</a></li>'
                    references_list.append(reference_link)
        references_html += "</ul>"
        exploit_html += "</ul>"

        references_dict[cve_id] = references_list

        return references_html + exploit_html

    except NoSuchElementException:
        return "References not found"
    except TimeoutException:
        return "Timeout occurred"
    except WebDriverException as e:
        return f"WebDriverException: {e}"
    except Exception as e:
        return f"An error occurred: {e}"

    finally:
        driver.quit()

# TN - Function to check if a URL is valid and accessible
def is_valid_url(url):
    try:
        response = requests.head(url, allow_redirects=True)
        return response.status_code == 200
    except requests.RequestException:
        return False

# TN - Function to search and extract CVE information
def search_and_extract_cve(input_value):
    try:
        if not is_valid_cve_id(input_value):
            return "Invalid CVE ID"

        disputed_cves_file = r"C:\Users\teymu\OneDrive\Desktop\TeymurCVETool\DisputedUpdated2024March.txt"
        with open(disputed_cves_file, 'r') as file:
            disputed_cves = file.read().splitlines()
        if input_value in disputed_cves:
            return "Process is stopped due to DISPUTED State"

        state = get_cve_state(input_value)

        if state != "PUBLISHED":
            return "This CVE doesn't fit the requirements, try again. It can be due to several reasons. For example, Non-published CVE (Rejected or Reserved), wrong format, etc."
        
        vendor_info, description_value = get_vendor_info(input_value)

        vendor_table = ""
        for vendor_data in vendor_info:
            vendor = vendor_data.get('vendor', "")
            product = vendor_data.get('product', "")
            versions = ", ".join(version.get('version', "") for version in vendor_data.get('versions', ""))
            vendor_table += f"""
            <table border="1">
                <tr>
                    <th>VENDOR</th>
                    <th>PRODUCT</th>
                    <th>VERSIONS</th>
                </tr>
                <tr>
                    <td>{vendor}</td>
                    <td>{product}</td>
                    <td>{versions}</td>
                </tr>
            </table>
            <br>
            """

        base_score = get_base_score(input_value)
        vector = get_vector(input_value)
        references_html = get_references(input_value)

        additional_info = f"""
        <h2>Base Score</h2>
        <p>{base_score}</p>
        <h2>Description</h2>
        <p>{description_value}</p>
        <h2>State</h2>
        <p>{state}</p>
        <h2>Vector</h2>
        <p>{vector}</p>
        {references_html}
        """

        # TN - Open the first two URLs from references automatically
        if input_value in references_dict:
            urls_to_open = references_dict[input_value][:2]
            for url in urls_to_open:
                webbrowser.open(url)

        return f"{vendor_table}{additional_info}"

    except TimeoutException:
        return "Timeout occurred"
    except WebDriverException as e:
        return f"WebDriverException: {e}"
    except Exception as e:
        return f"An error occurred: {e}"

# TN - Function to open browser window
def open_browser():
    time.sleep(1)
    webbrowser.open("http://127.0.0.1:5000/")

# TN - Function to handle routing and form submission
@app.route('/', methods=['GET', 'POST'])
def index():
    result = None
    error_message = None
    if request.method == 'POST':
        cve_id = request.form['cve_id']
        if not is_valid_cve_id(cve_id):
            error_message = "Invalid CVE ID"
        else:
            result = search_and_extract_cve(cve_id)
    return render_template_string('''
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Search CVE</title>
            <style>
                body {
                    margin: 0;
                    padding: 0;
                    background-size: cover;
                    background-position: center;
                    font-family: Arial, sans-serif; /* Change font family if needed */
                }
                .container {
                    width: 50%; /* Adjust the width as needed */
                    margin: auto;
                    padding: 20px;
                    background-color: rgba(255, 255, 255, 0.7); /* Adjust the opacity as needed */
                    border-radius: 10px;
                    text-align: center;
                }
                input[type="text"], input[type="submit"] {
                    width: 100%;
                    padding: 10px;
                    margin: 5px 0;
                    box-sizing: border-box;
                    border-radius: 5px;
                    border: none;
                }
                input[type="submit"] {
                    background-color: #007bff; /* Change button color if needed */
                    color: white;
                    cursor: pointer;
                }
                input[type="submit"]:hover {
                    background-color: #0056b3; /* Change button hover color if needed */
                }
            </style>
        </head>
        <body>
            <div class="container">
                <form action="/" method="post">
                    <label for="cve_id">YYYY must be a year starting from 1999</label><br>
                    <label for="cve_id">NNNN must be 4 digits or greater</label><br><br>
                    <label for="cve_id">Enter CVE ID, for example CVE-YYYY-NNNN</label><br>
                    <input type="text" id="cve_id" name="cve_id"><br>
                    <input type="submit" value="Search">
                </form>
                {% if error_message %}
                <div style="color:red;">{{ error_message }}</div>
                {% endif %}
                {% if result %}
                <h1>CVE Search Result for {{ cve_id }}</h1>
                <div>{{ result|safe }}</div>
                {% endif %}
            </div>
        </body>
        </html>
    ''', result=result, error_message=error_message, cve_id=request.form.get('cve_id', ''))

# TN - Entry point of the application
if __name__ == "__main__":
    threading.Thread(target=open_browser).start()
    app.run(debug=False)

